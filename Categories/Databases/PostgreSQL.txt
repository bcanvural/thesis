PostgreSQL, often simply Postgres, is an object-relational database management system (ORDBMS) with an emphasis on extensibility and standards-compliance. As a database server, its primary function is to store data securely, supporting best practices, and to allow for retrieval at the request of other software applications. It can handle workloads ranging from small single-machine applications to large Internet-facing applications with many concurrent users.

PostgreSQL implements the majority of the core SQL:2011 standard,[10][11] is ACID-compliant and transactional (including most DDL statements) avoiding locking issues using multiversion concurrency control (MVCC), provides immunity to dirty reads and full serializability; handles complex SQL queries using many indexing methods that are not available in other databases; has updateable views and materialized views, triggers, foreign keys; supports functions and stored procedures, and other expandability,[12] and has a large number of extensions written by third parties. In addition to the possibility of working with the major proprietary and open source databases, PostgreSQL supports migration from them, by its extensive standard SQL support and available migration tools. Proprietary extensions in databases such as Oracle can be emulated by built-in and third-party open source compatibility extensions. Recent versions also provide replication of the database for availability and scalability.

PostgreSQL is cross-platform and runs on many operating systems including Linux, FreeBSD, OS X, Solaris, and Microsoft Windows. On OS X, PostgreSQL has been the default database starting with Mac OS X 10.7 Lion Server,[13][14][15] and PostgreSQL client tools are bundled within the desktop edition. The vast majority of Linux distributions have it available in supplied packages.

PostgreSQL is developed by the PostgreSQL Global Development Group, a diverse group of many companies and individual contributors.[16] It is free and open-source software, released under the terms of the PostgreSQL License, a permissive free-software license.

Contents

    1 Name
    2 History
    3 Multiversion concurrency control (MVCC)
    4 Storage and replication
        4.1 Replication
        4.2 Indexes
        4.3 Schemas
        4.4 Data types
        4.5 User-defined objects
        4.6 Inheritance
        4.7 Other storage features
    5 Control and connectivity
        5.1 Foreign data wrappers
        5.2 Interfaces
        5.3 Procedural languages
        5.4 Triggers
        5.5 Asynchronous notifications
        5.6 Rules
        5.7 Other querying features
    6 Security
    7 Upcoming features
    8 Add-ons
    9 Benchmarks and performance
    10 Platforms
    11 Database administration
    12 Prominent users
    13 Release history
    14 See also
    15 References
    16 Further reading
    17 External links

Name

PostgreSQL's developers pronounce it /ˈpoʊstɡrɛs ˌkjuː ˈɛl/.[17] It is abbreviated as Postgres, its original name. Because of ubiquitous support for the SQL Standard among most relational databases, the community considered changing the name back to Postgres. However, the PostgreSQL Core Team announced in 2007 that the product would continue to use the name PostgreSQL.[18] The name refers to the project's origins as a "post-Ingres" database, being a development from University Ingres DBMS (Ingres being an acronym for INteractive Graphics REtrieval System).[19][20]
History

PostgreSQL evolved from the Ingres project at the University of California, Berkeley. In 1982 the leader of the Ingres team, Michael Stonebraker, left Berkeley to make a proprietary version of Ingres.[19] He returned to Berkeley in 1985, and started a post-Ingres project to address the problems with contemporary database systems that had become increasingly clear during the early 1980s. The new project, POSTGRES, aimed to add the fewest features needed to completely support types.[21] These features included the ability to define types and to fully describe relationships – something used widely before but maintained entirely by the user. In POSTGRES, the database "understood" relationships, and could retrieve information in related tables in a natural way using rules. POSTGRES used many of the ideas of Ingres, but not its code.[22]

Starting in 1986, the POSTGRES team published a number of papers describing the basis of the system, and by 1987 had a prototype version shown at the 1988 ACM SIGMOD Conference. The team released version 1 to a small number of users in June 1989, then version 2 with a re-written rules system in June 1990. Version 3, released in 1991, again re-wrote the rules system, and added support for multiple storage managers and an improved query engine. By 1993, the great number of users began to overwhelm the project with requests for support and features. After releasing version 4.2[23] on June 30, 1994—primarily a cleanup—the project ended. Berkeley had released POSTGRES under an MIT-style license, which enabled other developers to use the code for any use. At the time, POSTGRES used an Ingres-influenced POSTQUEL query language interpreter, which could be interactively used with a console application named monitor.

In 1994, Berkeley graduate students Andrew Yu and Jolly Chen replaced the POSTQUEL query language interpreter with one for the SQL query language, creating Postgres95. The front-end program monitor was also replaced by psql. Yu and Chen released the code on the web.

On July 8, 1996, Marc Fournier at Hub.org Networking Services provided the first non-university development server for the open-source development effort.[1] With the participation of Bruce Momjian and Vadim B. Mikheev, work began to stabilize the code inherited from Berkeley. The first open-source version was released on August 1, 1996.[citation needed]

In 1996, the project was renamed to PostgreSQL to reflect its support for SQL. The online presence at the website PostgreSQL.org began on October 22, 1996.[24] The first PostgreSQL release formed version 6.0 on January 29, 1997. Since then a group of developers and volunteers around the world have maintained the software as The PostgreSQL Global Development Group.

The PostgreSQL project continues to make major releases (approximately annually) and minor "bugfix" releases, all available under its free and open-source software PostgreSQL License. Code comes from contributions from proprietary vendors, support companies, and open-source programmers at large.
Multiversion concurrency control (MVCC)

PostgreSQL manages concurrency through a system known as multiversion concurrency control (MVCC), which gives each transaction a "snapshot" of the database, allowing changes to be made without being visible to other transactions until the changes are committed. This largely eliminates the need for read locks, and ensures the database maintains the ACID (atomicity, consistency, isolation, durability) principles in an efficient manner. PostgreSQL offers three levels of transaction isolation: Read Committed, Repeatable Read and Serializable. Because PostgreSQL is immune to dirty reads, requesting a Read Uncommitted transaction isolation level provides read committed instead. Prior to PostgreSQL 9.1, requesting Serializable provided the same isolation level as Repeatable Read. PostgreSQL 9.1 and later support full serializability via the serializable snapshot isolation (SSI) technique.[25]
Storage and replication
Replication

PostgreSQL, beginning with version 9.0, includes built-in binary replication, based on shipping the changes (write-ahead logs) to replica nodes asynchronously.

Version 9.0 also introduced the ability to run read-only queries against these replicated nodes, where earlier versions would only allow that after promoting them to be a new master. This allows splitting read traffic among multiple nodes efficiently. Earlier replication software that allowed similar read scaling normally relied on adding replication triggers to the master, introducing additional load onto it.

Beginning from version 9.1, PostgreSQL also includes built-in synchronous replication[26] that ensures that, for each write transaction, the master waits until at least one replica node has written the data to its transaction log. Unlike other database systems, the durability of a transaction (whether it is asynchronous or synchronous) can be specified per-database, per-user, per-session or even per-transaction. This can be useful for work loads that do not require such guarantees, and may not be wanted for all data as it will have some negative effect on performance due to the requirement of the confirmation of the transaction reaching the synchronous standby.

There can be a mixture of synchronous and asynchronous standby servers. A list of synchronous standby servers can be specified in the configuration which determines which servers are candidates for synchronous replication. The first in the list which is currently connected and actively streaming is the one that will be used as the current synchronous server. When this fails, it falls to the next in line.

Synchronous multi-master replication is currently not included in the PostgreSQL core. Postgres-XC which is based on PostgreSQL provides scalable synchronous multi-master replication,[27] available in version 1.2.1 (April 2015 version) is licensed under the same license as PostgreSQL. A similar project is called Postgres-XL and is available under the Mozilla Public License.[28] Postgres-R is yet another older fork.[29] Bi-Directional Replication (BDR) is an asynchronous multi-master replication system for PostgreSQL.[30]

The community has also written some tools to make managing replication clusters easier, such as repmgr.

There are also several asynchronous trigger-based replication packages for PostgreSQL. These remain useful even after introduction of the expanded core capabilities, for situations where binary replication of an entire database cluster is not the appropriate approach:

    Slony-I
    Londiste, part of SkyTools (developed by Skype)
    Bucardo multi-master replication (developed by Backcountry.com)[31]
    SymmetricDS multi-master, multi-tier replication

Indexes

PostgreSQL includes built-in support for regular B-tree and hash indexes, and four index access methods: generalized search trees (GiST), generalized inverted indexes (GIN), Space-Partitioned GiST (SP-GiST) [32] and Block Range Indexes (BRIN). Hash indexes are implemented, but discouraged because they cannot be recovered after a crash or power loss. In addition, user-defined index methods can be created, although this is quite an involved process. Indexes in PostgreSQL also support the following features:

    Expression indexes can be created with an index of the result of an expression or function, instead of simply the value of a column.
    Partial indexes, which only index part of a table, can be created by adding a WHERE clause to the end of the CREATE INDEX statement. This allows a smaller index to be created.
    The planner is capable of using multiple indexes together to satisfy complex queries, using temporary in-memory bitmap index operations.
    As of PostgreSQL 9.1, k-nearest neighbors (k-NN) indexing (also referred to KNN-GiST[33]) provides efficient searching of "closest values" to that specified, useful to finding similar words, or close objects or locations with geospatial data. This is achieved without exhaustive matching of values.
    In PostgreSQL 9.2 and above, index-only scans often allow the system to fetch data from indexes without ever having to access the main table.
    PostgreSQL 9.5 introduced Block Range Indexes (BRIN).

Schemas

In PostgreSQL, a schema holds all objects (with the exception of roles and tablespaces). Schemas effectively act like namespaces, allowing objects of the same name to co-exist in the same database.

By default, newly created databases have a schema called "public", but any additional schemas can be added, and the public schema isn't mandatory. A "search_path" determines the order in which the system checks schemas for unqualified objects (those without a prefixed schema); one can configure search paths on a database or role level. The search path, by default, contains the special schema name of "$user", which first looks for a schema named after the connected database user (e.g. if the user "dave" were connected, it would first look for a schema also named "dave" when referring to any objects). If such a schema is not found, it then proceeds to the next listed schema. New objects are created in whichever valid schema (one that presently exists) appears first in the search path.
Data types

A wide variety of native data types are supported, including:

    Boolean
    Arbitrary precision numerics
    Character (text, varchar, char)
    Binary
    Date/time (timestamp/time with/without timezone, date, interval)
    Money
    Enum
    Bit strings
    Text search type
    Composite
    HStore (an extension enabled key-value store within PostgreSQL)
    Arrays (variable length and can be of any data type, including text and composite types) up to 1 GB in total storage size
    Geometric primitives
    IPv4 and IPv6 addresses
    CIDR blocks and MAC addresses
    XML supporting XPath queries
    UUID
    JSON (since version 9.2), and a faster binary JSONB (since version 9.4; not the same as BSON[34])

In addition, users can create their own data types which can usually be made fully indexable via PostgreSQL's indexing infrastructures - GiST, GIN, SP-GiST. Examples of these include the geographic information system (GIS) data types from the PostGIS project for PostgreSQL.

There is also a data type called a "domain", which is the same as any other data type but with optional constraints defined by the creator of that domain. This means any data entered into a column using the domain will have to conform to whichever constraints were defined as part of the domain.

Starting with PostgreSQL 9.2, a data type that represents a range of data can be used which are called range types. These can be discrete ranges (e.g. all integer values 1 to 10) or continuous ranges (e.g. any point in time between 10:00 am and 11:00 am). The built-in range types available include ranges of integers, big integers, decimal numbers, time stamps (with and without time zone) and dates.

Custom range types can be created to make new types of ranges available, such as IP address ranges using the inet type as a base, or float ranges using the float data type as a base. Range types support inclusive and exclusive range boundaries using the [] and () characters respectively. (e.g. '[4,9)' represents all integers starting from and including 4 up to but not including 9.) Range types are also compatible with existing operators used to check for overlap, containment, right of etc.
User-defined objects

New types of almost all objects inside the database can be created, including:

    Casts
    Conversions
    Data types
    Domains
    Functions, including aggregate functions and window functions
    Indexes including custom indexes for custom types
    Operators (existing ones can be overloaded)
    Procedural languages

Inheritance

Tables can be set to inherit their characteristics from a "parent" table. Data in child tables will appear to exist in the parent tables, unless data is selected from the parent table using the ONLY keyword, i.e. SELECT * FROM ONLY parent_table;. Adding a column in the parent table will cause that column to appear in the child table.

Inheritance can be used to implement table partitioning, using either triggers or rules to direct inserts to the parent table into the proper child tables.

As of 2010, this feature is not fully supported yet—in particular, table constraints are not currently inheritable. All check constraints and not-null constraints on a parent table are automatically inherited by its children. Other types of constraints (unique, primary key, and foreign key constraints) are not inherited.

Inheritance provides a way to map the features of generalization hierarchies depicted in Entity Relationship Diagrams (ERD) directly into the PostgreSQL database.
Other storage features

    Referential integrity constraints including foreign key constraints, column constraints, and row checks
    Binary and textual large-object storage
    Tablespaces
    Per-column collation (from 9.1)
    Online backup
    Point-in-time recovery, implemented using write-ahead logging
    In-place upgrades with pg_upgrade for less downtime (supports upgrades from 8.3.x and later)

Control and connectivity
Foreign data wrappers

As of version 9.1, PostgreSQL can link to other systems to retrieve data via foreign data wrappers (FDWs). These can take the form of any data source, such as a file system, another RDBMS, or a web service. This means regular database queries can use these data sources like regular tables, and even join multiple data sources together.
Interfaces

PostgreSQL has several interfaces available and is also widely supported among programming language libraries. Built-in interfaces include libpq (PostgreSQL's official C application interface) and ECPG (an embedded C system). External interfaces include:

    libpqxx: C++ interface
    PostgresDAC: PostgresDAC (for Embarcadero RadStudio/Delphi/CBuilder XE-XE3)
    DBD::Pg: Perl DBI driver
    JDBC: JDBC interface
    Lua: Lua interface
    Npgsql: .NET data provider
    ST-Links SpatialKit: Link Tool to ArcGIS
    PostgreSQL.jl: Julia interface
    node-postgres: Node.js interface
    pgoledb: OLEDB interface
    psqlODBC: ODBC interface
    psycopg2:[35] Python interface (also used by HTSQL)
    pgtclng: Tcl interface
    pyODBC: Python library
    php5-pgsql: PHP driver based on libpq
    postmodern: A Common Lisp interface
    pq 
    : A pure Go PostgreSQL driver for the Go database/sql package. The driver passes the compatibility test suite.[36]
    dpq 
    : D interface to libpq
    epgsql: Erlang interface

Procedural languages

Procedural languages allow developers to extend the database with custom subroutines (functions), often called stored procedures. These functions can be used to build triggers (functions invoked upon modification of certain data) and custom aggregate functions. Procedural languages can also be invoked without defining a function, using the "DO" command at SQL level.

Languages are divided into two groups: "Safe" languages are sandboxed and can be safely used by any user. Procedures written in "unsafe" languages can only be created by superusers, because they allow bypassing the database's security restrictions, but can also access sources external to the database. Some languages like Perl provide both safe and unsafe versions.

PostgreSQL has built-in support for three procedural languages:

    Plain SQL (safe). Simpler SQL functions can get expanded inline into the calling (SQL) query, which saves function call overhead and allows the query optimizer to "see inside" the function.
    PL/pgSQL (safe), which resembles Oracle's PL/SQL procedural language and SQL/PSM.
    C (unsafe), which allows loading custom shared libraries into the database. Functions written in C offer the best performance, but bugs in code can crash and potentially corrupt the database. Most built-in functions are written in C.

In addition, PostgreSQL allows procedural languages to be loaded into the database through extensions. Three language extensions are included with PostgreSQL to support Perl, Python and Tcl. There are external projects to add support for many other languages,[37] including Java, JavaScript (PL/V8), R, Ruby, and others.
Triggers

Triggers are events triggered by the action of SQL DML statements. For example, an INSERT statement might activate a trigger that checks if the values of the statement are valid. Most triggers are only activated by either INSERT or UPDATE statements.

Triggers are fully supported and can be attached to tables. In PostgreSQL 9.0 and above, triggers can be per-column and conditional, in that UPDATE triggers can target specific columns of a table, and triggers can be told to execute under a set of conditions as specified in the trigger's WHERE clause. As of PostgreSQL 9.1, triggers can be attached to views by utilising the INSTEAD OF condition. Views in versions prior to 9.1 can have rules, though. Multiple triggers are fired in alphabetical order. In addition to calling functions written in the native PL/pgSQL, triggers can also invoke functions written in other languages like PL/Python or PL/Perl.
Asynchronous notifications

PostgreSQL provides an asynchronous messaging system that is accessed through the NOTIFY, LISTEN and UNLISTEN commands. A session can issue a NOTIFY command, along with the user-specified channel and an optional payload, to mark a particular event occurring. Other sessions are able to detect these events by issuing a LISTEN command, which can listen to a particular channel. This functionality can be used for a wide variety of purposes, such as letting other sessions know when a table has updated or for separate applications to detect when a particular action has been performed. Such a system prevents the need for continuous polling by applications to see if anything has yet changed, and reducing unnecessary overhead. Notifications are fully transactional, in that messages are not sent until the transaction they were sent from is committed. This eliminates the problem of messages being sent for an action being performed which is then rolled back.

Many of the connectors for PostgreSQL provide support for this notification system (including libpq, JDBC, Npgsql, psycopg and node.js) so it can be used by external applications.
Rules

Rules allow the "query tree" of an incoming query to be rewritten. Rules, or more properly, "Query Re-Write Rules", are attached to a table/class and "Re-Write" the incoming DML (select, insert, update, and/or delete) into one or more queries that either replace the original DML statement or execute in addition to it. Query Re-Write occurs after DML statement parsing, but before query planning.
Other querying features

    Transactions
    Full text search
    Views
        Materialized views[38]
        Updateable views[39]
        Recursive views[40]
    Inner, outer (full, left and right), and cross joins
    Sub-selects
        Correlated sub-queries[41]
    Regular expressions[42]
    Common table expressions and writable common table expressions
    Encrypted connections via TLS (current versions do not use vulnerable SSL, even with that configuration option)[43]
    Domains
    Savepoints
    Two-phase commit
    TOAST (The Oversized-Attribute Storage Technique) is used to transparently store large table attributes (such as big MIME attachments or XML messages) in a separate area, with automatic compression.
    Embedded SQL is implemented using preprocessor. SQL code is first written embedded into C code. Then code is run through ECPG preprocessor, which replaces SQL with calls to code library. Then code can be compiled using a C compiler. Embedding works also with C++ but it does not recognize all C++ constructs.

Security

PostgreSQL manages its internal security on a per-role basis. A role is generally regarded to be a user (a role that can log in), or a group (a role of which other roles are members). Permissions can be granted or revoked on any object down to the column level, and can also allow/prevent the creation of new objects at the database, schema or table levels.

The sepgsql extension (provided with PostgreSQL as of version 9.1) provides an additional layer of security by integrating with SELinux. This utilises PostgreSQL's SECURITY LABEL feature.

PostgreSQL natively supports a broad number of external authentication mechanisms, including:

    password (either MD5 or plain-text)
    GSSAPI
    SSPI
    Kerberos
    ident (maps O/S user-name as provided by an ident server to database user-name)
    peer (maps local user name to database user name)
    LDAP
        Active Directory
    RADIUS
    certificate
    PAM

The GSSAPI, SSPI, Kerberos, peer, ident and certificate methods can also use a specified "map" file that lists which users matched by that authentication system are allowed to connect as a specific database user.

These methods are specified in the cluster's host-based authentication configuration file (pg_hba.conf), which determines what connections are allowed. This allows control over which user can connect to which database, where they can connect from (IP address/IP address range/domain socket), which authentication system will be enforced, and whether the connection must use TLS.
Upcoming features

Upcoming features in version 9.6 include:

    Extension cascade support to install dependencies[44]
    Parallel sequential scans,[45] parallel joins[46] and parallel aggregates[47]
    Cube extension kNN support[48]
    Sort pushdown,[49] join pushdown[50] and DML (UPDATE/DELETE) pushdown[51] for postgres_fdw
    pg_visibility extension for examining visibility maps[52]
    Command progress reporting[53]
    Detailed wait information in pg_stat_activity[54]
    Frozen page data in visibility map for skipping vacuum on already-frozen data[55]
    New remote_apply replication mode which waits for confirmation that a standby has applied changes[56]
    Index-only scans for partial indexes[57]
    Support for multiple synchronous standbys[58]
    Phrase full text search[59]
    User-defined expiration of snapshots to control table bloat[60]

Add-ons

    Apache MADlib: an open source analytics library for PostgreSQL providing mathematical, statistical and machine-learning methods for structured and unstructured data[61]
    Ora2Pg: an OpenSource, GPL licensed Oracle and MySQL migration tool written in Perl Ora2Pg homepage 
    MySQL migration wizard: included with EnterpriseDB's PostgreSQL installer (source code also available)[62]
    Performance Wizard: included with EnterpriseDB's PostgreSQL installer (source code also available)[62]
    pgRouting: extended PostGIS to provide geospatial routing functionality[63] (GNU GPL)
    PostGIS: a popular add-on which provides support for geographic objects (GNU GPL)
    Postgres Enterprise Manager: a non-free tool consisting of a service, multiple agents, and a GUI which provides remote monitoring, management, reporting, capacity planning and tuning[64]
    ST-Links SpatialKit: Extension for directly connecting to spatial databases[65]

Benchmarks and performance

Many informal performance studies of PostgreSQL have been done.[66] Performance improvements aimed at improving scalability started heavily with version 8.1. Simple benchmarks between version 8.0 and version 8.4 showed that the latter was more than 10 times faster on read-only workloads and at least 7.5 times faster on both read and write workloads.[67]

The first industry-standard and peer-validated benchmark was completed in June 2007 using the Sun Java System Application Server (proprietary version of GlassFish) 9.0 Platform Edition, UltraSPARC T1-based Sun Fire server and PostgreSQL 8.2.[68] This result of 778.14 SPECjAppServer2004 JOPS@Standard compares favourably with the 874 JOPS@Standard with Oracle 10 on an Itanium-based HP-UX system.[66]

In August 2007, Sun submitted an improved benchmark score of 813.73 SPECjAppServer2004 JOPS@Standard. With the system under test at a reduced price, the price/performance improved from $US 84.98/JOPS to $US 70.57/JOPS.[69]

The default configuration of PostgreSQL uses only a small amount of dedicated memory for performance-critical purposes such as caching database blocks and sorting. This limitation is primarily because older operating systems required kernel changes to allow allocating large blocks of shared memory.[70] PostgreSQL.org provides advice on basic recommended performance practice in a wiki.[71]

In April 2012, Robert Haas of EnterpriseDB demonstrated PostgreSQL 9.2's linear CPU scalability using a server with 64 cores.[72]

Matloob Khushi performed benchmarking between Postgresql 9.0 and MySQL 5.6.15 for their ability to process genomic data. In his performance analysis he found that PostgreSQL extracts overlapping genomic regions eight times faster than MySQL using two datasets of 80,000 each forming random human DNA regions. Insertion and data uploads in PostgreSQL were also better, although general searching capability of both databases was almost equivalent.[73]
Platforms

PostgreSQL is available for the following operating systems: Linux (all recent distributions), Windows (Windows 2000 SP4 and later) (compilable by e.g. Visual Studio, now with up to most recent 2015 version), DragonFly BSD, FreeBSD, OpenBSD, NetBSD, Mac OS X,[15] AIX, BSD/OS, HP-UX, IRIX, OpenIndiana,[74] OpenSolaris, SCO OpenServer, SCO UnixWare, Solaris and Tru64 Unix. In 2012, support for the following obsolete systems was removed (still supported in 9.1):[75] DG/UX, NeXTSTEP, SunOS 4, SVR4, Ultrix 4, and Univel. Most other Unix-like systems should also work.

PostgreSQL works on any of the following instruction set architectures: x86 and x86-64 on Windows and other operating systems; these are supported on other than Windows: IA-64 Itanium, PowerPC, PowerPC 64, S/390, S/390x, SPARC, SPARC 64, Alpha, ARMv8-A (64-bit)[76] and older ARM (32-bit, including older such as ARMv6 in Raspberry Pi[77]), MIPS, MIPSel, M68k, and PA-RISC. It is also known to work on M32R, NS32k, and VAX. In addition to these, it is possible to build PostgreSQL for an unsupported CPU by disabling spinlocks.[78]
Database administration
See also: Comparison of database tools

Open source front-ends and tools for administering PostgreSQL include:

psql
    The primary front-end for PostgreSQL is the psql command-line program, which can be used to enter SQL queries directly, or execute them from a file. In addition, psql provides a number of meta-commands and various shell-like features to facilitate writing scripts and automating a wide variety of tasks; for example tab completion of object names and SQL syntax.
pgAdmin 
    The pgAdmin package is a free and open source graphical user interface administration tool for PostgreSQL, which is supported on many computer platforms.[79] The program is available in more than a dozen languages. The first prototype, named pgManager, was written for PostgreSQL 6.3.2 from 1998, and rewritten and released as pgAdmin under the GNU General Public License (GPL) in later months. The second incarnation (named pgAdmin II) was a complete rewrite, first released on January 16, 2002. The third version, pgAdmin III, was originally released under the Artistic License and then released under the same license as PostgreSQL. Unlike prior versions that were written in Visual Basic, pgAdmin III is written in C++, using the wxWidgets framework allowing it to run on most common operating systems. The query tool includes a scripting language called pgScript 
    for supporting admin and development tasks. In December 2014, Dave Page, the pgAdmin project founder and primary developer,[80] announced that with the shift towards web-based models work has started on pgAdmin 4 with the aim of facilitating Cloud deployments.[81] Although still at the concept stage,[82] the plan is to build a single Python-based pgAdmin that users can either deploy on a web server or run from their desktop.
phpPgAdmin
    phpPgAdmin is a web-based administration tool for PostgreSQL written in PHP and based on the popular phpMyAdmin interface originally written for MySQL administration.[83]
PostgreSQL Studio
    PostgreSQL Studio allows users to perform essential PostgreSQL database development tasks from a web-based console. PostgreSQL Studio allows users to work with cloud databases without the need to open firewalls.[84]
TeamPostgreSQL
    AJAX/JavaScript-driven web interface for PostgreSQL. Allows browsing, maintaining and creating data and database objects via a web browser. The interface offers tabbed SQL editor with auto-completion, row-editing widgets, click-through foreign key navigation between rows and tables, 'favorites' management for commonly used scripts, among other features. Supports SSH for both the web interface and the database connections. Installers are available for Windows, Mac and Linux, as well as a simple cross-platform archive that runs from a script.[85]
SQLeo
    SQLeo is a Visual query builder, that help users to create or understand SQL queries. It has a specific feature to avoid "ERROR: current transaction is aborted, commands ignored until end of transaction block". The source code is hosted on SourceForge.
LibreOffice/OpenOffice.org Base
    LibreOffice/OpenOffice.org Base can be used as a front-end for PostgreSQL.[86][87]
pgFouine
    The pgFouine PostgreSQL log analyzer generates detailed reports from a PostgreSQL log file and provides VACUUM analysis.[88]

A number of companies offer proprietary tools for PostgreSQL. They often consist of a universal core that is adapted for various specific database products. These tools mostly share the administration features with the open source tools but offer improvements in data modeling, importing, exporting or reporting.
Prominent users

Prominent organizations and products that use PostgreSQL as the primary database include:

    Yahoo! for web user behavioral analysis, storing two petabytes and claimed to be the largest data warehouse using a heavily modified version of PostgreSQL with an entirely different column-based storage engine and different query processing layer. While for performance, storage, and query purposes the database bears little resemblance to PostgreSQL, the front-end maintains compatibility so that Yahoo can use many off-the-shelf tools already written to interact with PostgreSQL.[89][90]
    In 2009, social networking website MySpace used Aster Data Systems's nCluster database for data warehousing, which was built on unmodified PostgreSQL.[91][92]
    Geni.com uses PostgreSQL for their main genealogy database.[93]
    OpenStreetMap, a collaborative project to create a free editable map of the world.[94]
    Afilias, domain registries for .org, .info and others.[95]
    Sony Online multiplayer online games.[96]
    BASF, shopping platform for their agribusiness portal.[97]
    Reddit social news website.[98]
    Skype VoIP application, central business databases.[99]
    Sun xVM, Sun's virtualization and datacenter automation suite.[100]
    MusicBrainz, open online music encyclopedia.[101]
    The International Space Station for collecting telemetry data in orbit and replicating it to the ground.[102]
    MyYearbook social networking site.[103]
    Instagram, a popular mobile photo sharing service[104]
    Disqus, an online discussion and commenting service[105]
    TripAdvisor, travel information website of mostly user-generated content[106]

PostgreSQL is offered by some major vendors as software as a service:

    Heroku, a platform as a service provider, has supported PostgreSQL since the start in 2007.[107] They offer value-add features like full database "roll-back" (ability to restore a database from any point in time),[108] which is based on WAL-E, open source software developed by Heroku.[109]
    In January 2012, EnterpriseDB released a cloud version of both PostgreSQL and their own proprietary Postgres Plus Advanced Server with automated provisioning for failover, replication, load-balancing, and scaling. It runs on Amazon Web Services.[110]
    VMware offers vFabric Postgres for private clouds on vSphere since May 2012.[111]
    In November 2013, Amazon.com announced that they are adding PostgreSQL to their Relational Database Service offering.[112][113]

Release history
Release 	First release 	Latest minor version 	Latest release 	End of Life 	Milestones
0.01 	1995-05-01 	0.03 	1995-07-21 	 ? 	Initial release as Postgres95
1.0 	1995-09-05 	1.09 	1996-11-04 	 ? 	Changed copyright to a more liberal license
6.0 	1997-01-29 	− 		 ? 	Name change from Postgres95 to PostgreSQL (in 1996[1]), unique indexes, pg_dumpall utility, ident authentication.
6.1 	1997-06-08 	6.1.1 	1997-07-22 	 ? 	Multi-column indexes, sequences, money data type, GEQO (GEnetic Query Optimizer).
6.2 	1997-10-02 	6.2.1 	1997-10-17 	 ? 	JDBC interface, triggers, server programming interface, constraints.
6.3 	1998-03-01 	6.3.2 	1998-04-07 	2003-04 	SQL92 subselect capability, PL/pgTCL
6.4 	1998-10-30 	6.4.2 	1998-12-20 	2003-10 	VIEWs and RULEs, PL/pgSQL
6.5 	1999-06-09 	6.5.3 	1999-10-13 	2004-06 	MVCC, temporary tables, more SQL statement support (CASE, INTERSECT, and EXCEPT)
7.0 	2000-05-08 	7.0.3 	2000-11-11 	2004-05 	Foreign keys, SQL92 syntax for joins
7.1 	2001-04-13 	7.1.3 	2001-08-15 	2006-04 	Write-ahead log, Outer joins
7.2 	2002-02-04 	7.2.8 	2005-05-09 	2007-02 	PL/Python, OIDs no longer required, internationalization of messages
7.3 	2002-11-27 	7.3.21 	2008-01-07 	2007-11 	Schema, Internationalization
7.4 	2003-11-17 	7.4.30 	2010-10-04 	2010-10 	Optimization all-round
8.0 	2005-01-19 	8.0.26 	2010-10-04 	2010-10 	Native server on Microsoft Windows, savepoints, tablespaces, exception handling in functions, point-in-time recovery
8.1 	2005-11-08 	8.1.23 	2010-12-16 	2010-11 	Performance optimization, two-phase commit, table partitioning, index bitmap scan, shared row locking, roles
8.2 	2006-12-05 	8.2.23 	2011-09-26 	2011-12 	Performance optimization, online index builds, advisory locks, warm standby
8.3 	2008-02-04 	8.3.23 	2013-02-07 	2013-12 	Heap-only tuples, full text search, SQL/XML, ENUM types, UUID types
8.4 	2009-07-01 	8.4.22 	2014-07-24 	2014-07 	Windowing functions, default and variadic parameters for functions, column-level permissions, parallel database restore, per-database collation, common table expressions and recursive queries
9.0 	2010-09-20 	9.0.23 	2015-10-08 	2015-09 	Built-in binary streaming replication, Hot standby, 64-bit Windows, per-column triggers and conditional trigger execution, exclusion constraints, anonymous code blocks, named parameters, password rules
9.1 	2011-09-12 	9.1.22 	2016-05-13 	2016-09 	Synchronous replication, per-column collations, unlogged tables, k-nearest neighbors (k-NN) indexing, serializable snapshot isolation, writeable common table expressions, SE-Linux integration, extensions, SQL/MED attached tables (Foreign Data Wrappers), triggers on views
9.2 	2012-09-10 	9.2.17 	2016-05-13 	2017-09 	Cascading streaming replication, index-only scans, native JSON support, improved lock management, range types, pg_receivexlog tool, space-partitioned GiST indexes
9.3 	2013-09-09 	9.3.13 	2016-05-13 	2018-09 	Custom background workers, data checksums, dedicated JSON operators, LATERAL JOIN, faster pg_dump, new pg_isready server monitoring tool, trigger features, view features, writeable foreign tables, materialized views, replication improvements
9.4 	2014-12-18 	9.4.8 	2016-05-13 	2019-12 	JSONB data type, ALTER SYSTEM statement for changing config values, refresh materialized views without blocking reads, dynamic registration/start/stop of background worker processes, Logical Decoding API, GiN index improvements, Linux huge page support, database cache reloading via pg_prewarm
9.5 	2016-01-07 	9.5.3 	2016-05-13 	2021-01 	UPSERT, row level security, JSONB-modifying operators/functions, IMPORT FOREIGN SCHEMA, TABLESAMPLE, CUBE/ROLLUP, grouping sets, foreign table inheritance, pg_rewind tool, index-only scans for GiST indexes and new BRIN (Block Range Indexes) index to speed up queries on very large tables[114]
Community-supported
Community support ended[115]

