Unique data visualizations are more memorable, and add variety for the audience — even the most clear and straightforward visualization types lose their appeal when repeated over and over again. As visual literacy increases in the general population, data visualization designers will need to continually extend their knowledge of and proficiency across a widening range of visualization approaches to grow their skills alongside audience familiarity and expectations. Even more importantly, broad visualization know-how is essential for matching the data visualization type to the data available, the story to be told, and the question being answered.

In this article, I review 7 less-common (though certainly not unheard-of) yet very useful data visualization approaches:

    Slopegraphs
    Parallel Coordinates
    Alluvial Diagrams
    Sunbursts
    Circle Packing
    Horizon Charts
    Streamgraphs

Though these alternative visualization types are somewhat well-established and have proven their worth for many applications, they’re much less ubiquitous than bar charts, line graphs, scatter plots, and unfortunately, pie charts. Without a doubt, basic and common visualization types can still be best for certain, straightforward data stories. However, communicating complex topics — hierarchies, longitudinal data, and multi-variable comparisons, and so on — often involves more advanced visualizations with corresponding depth.

Overviews for each of the alternative visualization types include:

    A Brief Description
    When to Use It
    Two “In the Wild” Examples (that is, where others have used it effectively with real-world data)
    A Place to Read More about It
    One (Code-Free) Way to Make It — All of these visualizations can be made in programs like R and D3.js, as well as many commercial programs…but those avenues involve coding, have a longer ramp-up time and/or higher expense, and as a result, may not always be the best option. Each alternative visualization can also be created fairly quickly using free or commonly-available tools (e.g., Excel), and without needing to code: I focus on those methods here.

1 Slopegraphs — Slopegraphs are a special type of a line chart where two (or more) sets of values are compared by connecting each group’s values on one scale to their values on the second scale, with labels shown next to the group values for easy interpretation. The two scales have identical maximum and minimum values to make it very easy see whether each group increases, decreases, or remains similar between the two categories. Following a best practice, designers often highlight the lines of greatest interest (for example, the groups increasing or decreasing the most), graying out the rest.

When to Use It — To compare groups’ rate of change and rank-order switches between categories (often sequential years). Slopegraphs generally require that values be available for each group and for each category to show the full extent of changes from one category to the other.

Two “In the Wild” Examples

    New York Times’s Infant Death Rates Ranks by Country
    NPR’s How Your State Generates Power

A Place to Read More about It — by Cole Nussbaumer Knaflic

One (Code-Free) Way to Make It— by Jon Peltier

2 Parallel Coordinates — A parallel coordinates graph arrays multiple variables alongside one another with each scaled from highest to lowest value (highest at the top, lowest at the bottom) and with lines connecting each entity’s position for each variable, horizontally across the graph. Due to the large number of cases represented, it is often presented using an interactive view where individual lines can be selected and highlighted.

When to Use It — To reveal how groups show similar or different profiles across many quantitative variables. Parallel coordinates visualizations are among the best visualization types for large-scale, Big Data.

Two “In the Wild” Examples

    USDA’s Nutrient Database
    Domestic Data Streamer’s Physical Parallel Coordinates

A Place to Read More about It — by Stephen Few

One (Code-Free) Way to Make It— Use RAW: Paste in your own data directly from Excel or a similar spreadsheet program, or use their Cars sample dataset (then select Parallel Coordinates and drag each numerical dimension into the Dimensions box and Name into the Color box).

3 Alluvial Diagrams — Alluvial diagrams (closely related to Sankey diagrams) show how various entities (or nodes) flow together or apart across stages representing multiple groups or time periods. In these diagrams, width of the streams shows size or proportion within each category, similar to how tributaries join to form larger streams or how rivers split to form various branches.

When to Use It — To show how multiple groups relate to one another (shown when their streams flow together) or differ from one another (shown when their streams split apart), across several variables. Alluvial diagrams are especially useful for literal flows: of money, goods, time, votes, and so on, but also versatile for many other purposes. They can also show which variables are more clustered (fewer, wider streams) and which are more distributed (more, narrower streams).

Two “In the Wild” Examples

    InfoCaptor’s Presidents of USA and their Birth Signs
    Lawrence Livermore’s Estimated U.S. Energy Use in 2011

A Place to Read More about It — by DigitalSplashMedia

One (Code-Free) Way to Make It — Use SankeyMatic: Paste in your own data or use their sample data).

4 Sunbursts — Sunbursts show a hierarchical structure in a circular layout, with each ring outward representing a deeper level of the hierarchy. Ring segments are usually sized by the number of members within that segment. While sunbursts share some of the disadvantages of pie charts and are not well-suited to precise size comparisons, they do allow notable segments of a complex, multi-layered hierarchy to be quickly identified to guide further action.

When to Use It — To show how a multiple-level structure subdivides into subgroups, and which subgroups are bigger than others. Sunbursts are essentially hierarchical pie charts, allowing the pie slices to be split up in progressively more precise ways as the graph moves from the center to the outside.

Two “In the Wild” Examples

    Marcin Ignac’s Visualization of Search Results for Nature Photography
    Co.Design’s How to Tell the Difference Between 66 Varieties of Cheese

A Place to Read More about It — by Bime Analytics

One (Code-Free) Way to Make It — by BeatExcel

5Circle Packing — Circle packing diagrams show groups as tightly-organized circles, and are often used to show hierarchies where smaller groups are either colored similarly to others in the same category, or nested within larger groups.

When to Use It — To show how various groups and hierarchical structures vary in size and other properties (for example, budget allocation used to show size of circles and performance against budget represented by color of circles). While similar to the better-known visualization method Treemaps, circle packing diagrams are often more appealing to an audience due to an inherent preference many people have for circular graphics.

Two “In the Wild” Examples

    StanfordKay Studio’s Global Carbon Emissions
    Music Popcorn’s Visualization of the Music Genre Space

A Place to Read More about It — by Datavizcatalogue

One (Code-Free) Way to Make It — Use RAW: Paste in your own data directly from Excel or a similar spreadsheet program, or use their Movies sample dataset (then select Circle Packing and drag Genre then Movie into the Hierarchy box, Total Domestic Box Office into the Size box, and Genre into the Color box).

6 Horizon Charts — Horizon charts show time-series data with both negative and positive values on the vertical scale, using coloring or shading to show negative values while transposing them above the baseline “horizon”.

When to Use It — To show over-time data for one or more entities (e.g., countries, products, industries), especially useful when the data include both positive/growth and negative/contraction values, which would be difficult to represent clearly across many groups.

Two “In the Wild” Examples

    Flowing Data’s Food Pricing Patterns
    Warwickshire Observatory’s County Unemployment Rates

A Place to Read More about It — by Stephen Few

One (Code-Free) Way to Make It — by Superuser.com

7 Streamgraph — Streamgraphs show how the size or proportions of groups vary over time, with vertical width of the “stream” representing the size of that entity. Streamgraphs can use either a fixed scale, where change in the overall size of all groups can be seen, or a relative scale, where all groups consistently add to 100% (similar to an area chart).

When to Use It — To show group size or proportion over time, usually spanning at least 6 time periods, though the approach is scalable to extend much further. Streamgraphs can be extremely impactful to visually depict major shifts in cultural influences, technological trends, and economic forces over time — how quickly certain groups emerge while others fade away.

Two “In the Wild” Examples

    Datagraphic’s Who’s Been Hogging the Road Since 1973?
    Google’s Music Timeline

A Place to Read More about It — by Andy Kirk

One (Code-Free) Way to Make Them — Use RAW: Paste in your own data directly from Excel or a similar spreadsheet program, or use their Music sample dataset (then select Streamgraph and drag Media into the Group box, Total Domestic Box Office into the Size box, and Genre into the Color box).
The Benefits of Experimenting with Alternative Data Visualization Types

The statement “data visualizations simplify the complex” is itself an oversimplification. Certainly, complexity needs to be conveyed clearly; graphical rather than numerical displays of information aid greatly in pursuing this goal. However, too much emphasis on merely “simplifying” complicated information — and using a limited set of tried and true visualization methods to do so — often isn’t the right answer either. Rather, designers should see visualization as a tool to preserve sophistication where it’s warranted, which often involves using graphics that match the depth of the content, rather than the other way around.

The more designers expand and experiment with their dataviz toolbox by trying out less-popular types when their questions and data allow it, the more effectively they’ll be able to match their message to their visualization medium — in addition to drawing on the engagement and memorability advantages of graphical types most members of your audience probably haven’t seen dozens of times before
Software visualization[1][2] or software visualisation refers to the visualization of information of and related to software systems—either the architecture of its source code or metrics of their runtime behavior- and their development process by means of static, interactive or animated 2-D or 3-D[3] visual representations of their structure,[4] execution,[5] behavior,[6] and evolution.

Contents

    1 Software system information
    2 Objectives
    3 Types
    4 See also
    5 References
    6 Further reading
    7 External links
        7.1 Research groups

Software system information

Software visualization uses a variety of information available about software systems. Key information categories include:

    implementation artifacts such as source codes,
    software metric data from measurements or from reverse engineering,
    traces that record execution behavior,
    software testing data (e.g., test coverage)
    software repository data that tracks changes.

Objectives

The objectives of software visualization are to support the understanding of software systems (i.e., its structure) and algorithms (e.g., by animating the behavior of sorting algorithms) as well as the analysis and exploration of software systems and their anomalies (e.g., by showing classes with high coupling) and their development and evolution. One of the strengths of software visualization is to combine and relate information of software systems that are not inherently linked, for example by projecting code changes onto software execution traces.[7]

Software visualization can be used as tool and technique to explore and analyze software system information, e.g., to discover anomalies similar to the process of visual data mining.[8] For example, software visualization is used to monitoring activities such as for code quality or team activity.[9] Visualization is inherently not a method for software quality assurance.
Types

Tools for software visualization might be used to visualize source code and quality defects during software development and maintenance activities. There are different approaches to map source code to a visual representation such as by software maps[10] Their objective includes, for example, the automatic discovery and visualization of quality defects in object-oriented software systems and services. Commonly, they visualize the direct relationship of a class and its methods with other classes in the software system and mark potential quality defects. A further benefit is the support for visual navigation through the software system.

More or less specialized graph drawing software is used for software visualization. A small-scale 2003 survey of researchers active in the reverse engineering and software maintenance fields found that a wide variety of visualization tools were used, including general purpose graph drawing packages like GraphViz and GraphEd, UML tools like Rational Rose and Borland Together, and more specialized tools like Visualization of Compiler Graphs (VCG) and Rigi.[11]:99–100 The range of UML tools that can act as a visualizer by reverse engineering source is by no means short; a 2007 book noted that besides the two aforementioned tools, ESS-Model, BlueJ, and Fujaba also have this capability, and that Fujaba can also identify design patterns.[12]
See also

Programs

    Imagix 4D
    NDepend
    SonarJ
    Sotoarc

Related concepts

    Software maintenance
    Software maps
    Software diagnosis
    Cognitive dimensions of notations
    Software archaeology

