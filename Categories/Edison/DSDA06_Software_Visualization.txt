Software visualization[1][2] or software visualisation refers to the visualization of information of and related to software systems—either the architecture of its source code or metrics of their runtime behavior- and their development process by means of static, interactive or animated 2-D or 3-D[3] visual representations of their structure,[4] execution,[5] behavior,[6] and evolution.

Contents

    1 Software system information
    2 Objectives
    3 Types
    4 See also
    5 References
    6 Further reading
    7 External links
        7.1 Research groups

Software system information

Software visualization uses a variety of information available about software systems. Key information categories include:

    implementation artifacts such as source codes,
    software metric data from measurements or from reverse engineering,
    traces that record execution behavior,
    software testing data (e.g., test coverage)
    software repository data that tracks changes.

Objectives

The objectives of software visualization are to support the understanding of software systems (i.e., its structure) and algorithms (e.g., by animating the behavior of sorting algorithms) as well as the analysis and exploration of software systems and their anomalies (e.g., by showing classes with high coupling) and their development and evolution. One of the strengths of software visualization is to combine and relate information of software systems that are not inherently linked, for example by projecting code changes onto software execution traces.[7]

Software visualization can be used as tool and technique to explore and analyze software system information, e.g., to discover anomalies similar to the process of visual data mining.[8] For example, software visualization is used to monitoring activities such as for code quality or team activity.[9] Visualization is inherently not a method for software quality assurance.
Types

Tools for software visualization might be used to visualize source code and quality defects during software development and maintenance activities. There are different approaches to map source code to a visual representation such as by software maps[10] Their objective includes, for example, the automatic discovery and visualization of quality defects in object-oriented software systems and services. Commonly, they visualize the direct relationship of a class and its methods with other classes in the software system and mark potential quality defects. A further benefit is the support for visual navigation through the software system.

More or less specialized graph drawing software is used for software visualization. A small-scale 2003 survey of researchers active in the reverse engineering and software maintenance fields found that a wide variety of visualization tools were used, including general purpose graph drawing packages like GraphViz and GraphEd, UML tools like Rational Rose and Borland Together, and more specialized tools like Visualization of Compiler Graphs (VCG) and Rigi.[11]:99–100 The range of UML tools that can act as a visualizer by reverse engineering source is by no means short; a 2007 book noted that besides the two aforementioned tools, ESS-Model, BlueJ, and Fujaba also have this capability, and that Fujaba can also identify design patterns.[12]
See also

Programs

    Imagix 4D
    NDepend
    SonarJ
    Sotoarc

Related concepts

    Software maintenance
    Software maps
    Software diagnosis
    Cognitive dimensions of notations
    Software archaeology

