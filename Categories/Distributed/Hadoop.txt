Apache Hadoop
Apache Hadoop (pronunciation: /h?'du?p/) is an open-source software framework for distributed storage and distributed processing of very large data sets on computer clusters built from commodity hardware. All the modules in Hadoop are designed with a fundamental assumption that hardware failures are common and should be automatically handled by the framework.[3]

The core of Apache Hadoop consists of a storage part, known as Hadoop Distributed File System (HDFS), and a processing part called MapReduce. Hadoop splits files into large blocks and distributes them across nodes in a cluster. To process data, Hadoop transfers packaged code for nodes to process in parallel based on the data that needs to be processed. This approach takes advantage of data locality[4]� nodes manipulating the data they have access to� to allow the dataset to be processed faster and more efficiently than it would be in a more conventional supercomputer architecture that relies on a parallel file system where computation and data are distributed via high-speed networking.[5]

The base Apache Hadoop framework is composed of the following modules:

Hadoop Common � contains libraries and utilities needed by other Hadoop modules;
Hadoop Distributed File System (HDFS) � a distributed file-system that stores data on commodity machines, providing very high aggregate bandwidth across the cluster;
Hadoop YARN � a resource-management platform responsible for managing computing resources in clusters and using them for scheduling of users' applications;[6][7] and
Hadoop MapReduce � an implementation of the MapReduce programming model for large scale data processing.
The term Hadoop has come to refer not just to the base modules above, but also to the ecosystem,[8] or collection of additional software packages that can be installed on top of or alongside Hadoop, such as Apache Pig, Apache Hive, Apache HBase, Apache Phoenix, Apache Spark, Apache ZooKeeper, Cloudera Impala, Apache Flume, Apache Sqoop, Apache Oozie, Apache Storm.[9]

Apache Hadoop's MapReduce and HDFS components were inspired by Google papers on their MapReduce and Google File System.[10]

The Hadoop framework itself is mostly written in the Java programming language, with some native code in C and command line utilities written as shell scripts. Though MapReduce Java code is common, any programming language can be used with "Hadoop Streaming" to implement the "map" and "reduce" parts of the user's program.[11] Other projects in the Hadoop ecosystem expose richer user interfaces.

1	History
2	Timeline
3	Architecture
3.1	File systems
3.1.1	Hadoop distributed file system
3.1.2	Other file systems
3.2	JobTracker and TaskTracker: the MapReduce engine
3.2.1	Scheduling
3.2.1.1	Fair scheduler
3.2.1.2	Capacity scheduler
3.3	Other applications
4	Prominent users
5	Hadoop hosting in the Cloud
5.1	On Microsoft Azure
5.2	On Amazon EC2/S3 services
5.3	Amazon Elastic MapReduce
5.4	On CenturyLink Cloud (CLC)
5.5	Google Cloud Platform
6	Commercial support
6.1	ASF's view on the use of "Hadoop" in product names
7	Papers
8	See also
9	References
10	Bibliography
11	External links
History
The genesis of Hadoop came from the Google File System paper[12] that was published in October 2003. This paper spawned another research paper from Google - MapReduce: Simplified Data Processing on Large Clusters.[13] Development started in the Apache Nutch project, but was moved to the new Hadoop subproject in January 2006.[14] Doug Cutting, who was working at Yahoo! at the time,[15] named it after his son's toy elephant.[16] The initial code that was factored out of Nutch consisted of 5k lines of code for NDFS and 6k lines of code for MapReduce.

The first committer added to the Hadoop project was Owen O�Malley in March 2006.[17] Hadoop 0.1.0 was released in April 2006 [18] and continues to evolve by the many contributors[19] to the Apache Hadoop project.

Timeline
Year	Month	Event	Ref.
2003	October	Google File System paper released	[20]
2004	December	MapReduce: Simplified Data Processing on Large Clusters	[21]
2006	January	Hadoop subproject created with mailing lists, jira, and wiki	[22]
2006	January	Hadoop is born from Nutch 197	[23]
2006	February	NDFS+ MapReduce moved out of Apache Nutch to create Hadoop	[24]
2006	February	Owen Omalley's first patch goes into Hadoop	[25]
2006	February	Hadoop is named after Cutting's son's yellow plush toy	[26]
2006	April	Hadoop 0.1.0 released	[27]
2006	April	Hadoop sorts 1.8TB on 188 nodes in 47.9 hours	[24]
2006	May	Yahoo deploys 300 machine Hadoop cluster	[24]
2006	October	Yahoo Hadoop cluster reaches 600 machines	[24]
2007	April	Yahoo runs 2 clusters of 1,000 machines	[24]
2007	June	Only 3 companies on "Powered by Hadoop Page"	[28]
2007	October	First release of Hadoop that includes HBase	[29]
2007	October	Yahoo Labs creates Pig, and donates it to the ASF	[30]
2008	January	YARN JIRA opened	Yarn Jira (Mapreduce 279)
2008	January	20 companies on "Powered by Hadoop Page"	[28]
2008	February	Yahoo moves its web index onto Hadoop	[31]
2008	February	Yahoo! production search index generated by a 10,000-core Hadoop cluster	[24]
2008	March	First Hadoop Summit	[32]
2008	April	Hadoop world record fastest system to sort a terabyte of data. Running on a 910-node cluster, Hadoop sorted one terabyte in 209 seconds	[24]
2008	May	Hadoop wins TeraByte Sort (World Record sortbenchmark.org)	[33]
2008	July	Hadoop wins Terabyte Sort Benchmark	[34]
2008	October	Loading 10TB/day in Yahoo clusters	[24]
2008	October	Cloudera, Hadoop distributor is founded	[35]
2008	November	Google MapReduce implementation sorted one terabyte in 68 seconds	[24]
2009	March	Yahoo runs 17 clusters with 24,000 machines	[24]
2009	April	Hadoop sorts a petabyte	[36]
2009	May	Yahoo! used Hadoop to sort one terabyte in 62 seconds	[24]
2009	June	Second Hadoop Summit	[37]
2009	June	Second Hadoop Summit	[38]
2009	July	Hadoop Core is renamed Hadoop Common	[39]
2009	July	MapR, Hadoop distributor founded	[40]
2009	July	HDFS now a separate subproject	[39]
2009	July	MapReduce now a separate subproject	[39]
2010	January	Kerberos support added to Hadoop	[41]
2010	May	Apache HBase Graduates	[42]
2010	June	Third Hadoop Summit	[43]
2010	June	Yahoo 4,000 nodes/70 petabytes	[44]
2010	June	Facebook 2,300 clusters/40 petabytes	[44]
2010	September	Apache Hive Graduates	[45]
2010	September	Apache Pig Graduates	[46]
2011	January	Apache Zookeeper Graduates	[47]
2011	January	Facebook, LinkedIn, eBay and IBM collectively contribute 200,000 lines of code	[48]
2011	March	Apache Hadoop takes top prize at Media Guardian Innovation Awards	[49]
2011	June	Rob Beardon and Eric Badleschieler spin out Hortonworks out of Yahoo.	[50]
2011	June	Yahoo has 42K Hadoop nodes and hundreds of petabytes of storage	[50]
2011	June	Third Annual Hadoop Summit (1,700 attendees)	[51]
2011	October	Debate over which company had contributed more to Hadoop.	[48]
2012	January	Hadoop community moves to separate from MapReduce and replace with YARN	[26]
2012	June	San Jose Hadoop Summit (2,100 attendees)	[52]
2012	November	Apache Hadoop 1.0 Available	[39]
2013	March	Hadoop Summit - Amsterdam (500 attendees)	[53]
2013	March	YARN deployed in production at Yahoo	[54]
2013	June	San Jose Hadoop Summit (2,700 attendees)	[55]
2013	October	Apache Hadoop 2.2 Available	[39]
2014	February	Apache Hadoop 2.3 Available	[39]
2014	February	Apache Spark top Level Apache Project	[56]
2014	April	Hadoop summit Amsterdam (750 attendees)	[57]
2014	June	Apache Hadoop 2.4 Available	[39]
2014	June	San Jose Hadoop Summit (3,200 attendees)	[58]
2014	August	Apache Hadoop 2.5 Available	[39]
2014	November	Apache Hadoop 2.6 Available	[39]
2015	April	Hadoop Summit Europe	[59]
2015	June	Apache Hadoop 2.7 Available	[39]
Architecture
See also: Hadoop Distributed File System, Apache HBase, and MapReduce
Hadoop consists of the Hadoop Common package, which provides filesystem and OS level abstractions, a MapReduce engine (either MapReduce/MR1 or YARN/MR2)[60] and the Hadoop Distributed File System (HDFS). The Hadoop Common package contains the necessary Java ARchive (JAR) files and scripts needed to start Hadoop.

For effective scheduling of work, every Hadoop-compatible file system should provide location awareness: the name of the rack (more precisely, of the network switch) where a worker node is. Hadoop applications can use this information to execute code on the node where the data is, and, failing that, on the same rack/switch to reduce backbone traffic. HDFS uses this method when replicating data for data redundancy across multiple racks. This approach reduces the impact of a rack power outage or switch failure; if one of these hardware failures occurs, the data will remain available.[61]

Hadoop cluster
A multi-node Hadoop cluster
A small Hadoop cluster includes a single master and multiple worker nodes. The master node consists of a Job Tracker, Task Tracker, NameNode, and DataNode. A slave or worker node acts as both a DataNode and TaskTracker, though it is possible to have data-only worker nodes and compute-only worker nodes. These are normally used only in nonstandard applications.[62]

Hadoop requires Java Runtime Environment (JRE) 1.6 or higher. The standard startup and shutdown scripts require that Secure Shell (ssh) be set up between nodes in the cluster.[63]

In a larger cluster, HDFS nodes are managed through a dedicated NameNode server to host the file system index, and a secondary NameNode that can generate snapshots of the namenode's memory structures, thereby preventing file-system corruption and loss of data. Similarly, a standalone JobTracker server can manage job scheduling across nodes. When Hadoop MapReduce is used with an alternate file system, the NameNode, secondary NameNode, and DataNode architecture of HDFS are replaced by the file-system-specific equivalents.

File systems
Hadoop distributed file system
The Hadoop distributed file system (HDFS) is a distributed, scalable, and portable file system written in Java for the Hadoop framework. Some consider HDFS to instead be a data store due to its lack of POSIX compliance and inability to be mounted,[64] but it does provide shell commands and Java API methods that are similar to other file systems.[65] A Hadoop cluster has nominally a single namenode plus a cluster of datanodes, although redundancy options are available for the namenode due to its criticality. Each datanode serves up blocks of data over the network using a block protocol specific to HDFS. The file system uses TCP/IP sockets for communication. Clients use remote procedure call (RPC) to communicate between each other.

HDFS stores large files (typically in the range of gigabytes to terabytes[66]) across multiple machines. It achieves reliability by replicating the data across multiple hosts, and hence theoretically does not require RAID storage on hosts (but to increase I/O performance some RAID configurations are still useful). With the default replication value, 3, data is stored on three nodes: two on the same rack, and one on a different rack. Data nodes can talk to each other to rebalance data, to move copies around, and to keep the replication of data high. HDFS is not fully POSIX-compliant, because the requirements for a POSIX file-system differ from the target goals for a Hadoop application. The trade-off of not having a fully POSIX-compliant file-system is increased performance for data throughput and support for non-POSIX operations such as Append.[67]

HDFS added the high-availability capabilities, as announced for release 2.0 in May 2012,[68] letting the main metadata server (the NameNode) fail over manually to a backup. The project has also started developing automatic fail-over.

The HDFS file system includes a so-called secondary namenode, a misleading name that some might incorrectly interpret as a backup namenode for when the primary namenode goes offline. In fact, the secondary namenode regularly connects with the primary namenode and builds snapshots of the primary namenode's directory information, which the system then saves to local or remote directories. These checkpointed images can be used to restart a failed primary namenode without having to replay the entire journal of file-system actions, then to edit the log to create an up-to-date directory structure. Because the namenode is the single point for storage and management of metadata, it can become a bottleneck for supporting a huge number of files, especially a large number of small files. HDFS Federation, a new addition, aims to tackle this problem to a certain extent by allowing multiple namespaces served by separate namenodes. Moreover, there are some issues in HDFS, namely, small file issue, scalability problem, Single Point of Failure (SPoF), and bottleneck in huge metadata request. An advantage of using HDFS is data awareness between the job tracker and task tracker. The job tracker schedules map or reduce jobs to task trackers with an awareness of the data location. For example: if node A contains data (x,y,z) and node B contains data (a,b,c), the job tracker schedules node B to perform map or reduce tasks on (a,b,c) and node A would be scheduled to perform map or reduce tasks on (x,y,z). This reduces the amount of traffic that goes over the network and prevents unnecessary data transfer. When Hadoop is used with other file systems, this advantage is not always available. This can have a significant impact on job-completion times, which has been demonstrated when running data-intensive jobs.[69]

HDFS was designed for mostly immutable files[67] and may not be suitable for systems requiring concurrent write-operations.

HDFS can be mounted directly with a Filesystem in Userspace (FUSE) virtual file system on Linux and some other Unix systems.

File access can be achieved through the native Java application programming interface (API), the Thrift API to generate a client in the language of the users' choosing (C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml), the command-line interface, browsed through the HDFS-UI Web application (webapp) over HTTP, or via 3rd-party network client libraries.[70]

Other file systems
Hadoop works directly with any distributed file system that can be mounted by the underlying operating system simply by using a file:// URL; however, this comes at a price: the loss of locality. To reduce network traffic, Hadoop needs to know which servers are closest to the data; this is information that Hadoop-specific file system bridges can provide.

In May 2011, the list of supported file systems bundled with Apache Hadoop were:

HDFS: Hadoop's own rack-aware file system.[71] This is designed to scale to tens of petabytes of storage and runs on top of the file systems of the underlying operating systems.
FTP File system: this stores all its data on remotely accessible FTP servers.
Amazon S3 (Simple Storage Service) file system. This is targeted at clusters hosted on the Amazon Elastic Compute Cloud server-on-demand infrastructure. There is no rack-awareness in this file system, as it is all remote.
Windows Azure Storage Blobs (WASB) file system. WASB, an extension on top of HDFS, allows distributions of Hadoop to access data in Azure blob stores without moving the data permanently into the cluster.
A number of third-party file system bridges have also been written, none of which are currently in Hadoop distributions. However, some commercial distributions of Hadoop ship with an alternative filesystem as the default�specifically IBM and MapR.

In 2009, IBM discussed running Hadoop over the IBM General Parallel File System.[72] The source code was published in October 2009.[73]
In April 2010, Parascale published the source code to run Hadoop against the Parascale file system.[74]
In April 2010, Appistry released a Hadoop file system driver for use with its own CloudIQ Storage product.[75]
In June 2010, HP discussed a location-aware IBRIX Fusion file system driver.[76]
In May 2011, MapR Technologies, Inc. announced the availability of an alternative file system for Hadoop, MapR FS, which replaced the HDFS file system with a full random-access read/write file system.
JobTracker and TaskTracker: the MapReduce engine
Main article: MapReduce
Above the file systems comes the MapReduce Engine, which consists of one JobTracker, to which client applications submit MapReduce jobs. The JobTracker pushes work out to available TaskTracker nodes in the cluster, striving to keep the work as close to the data as possible. With a rack-aware file system, the JobTracker knows which node contains the data, and which other machines are nearby. If the work cannot be hosted on the actual node where the data resides, priority is given to nodes in the same rack. This reduces network traffic on the main backbone network. If a TaskTracker fails or times out, that part of the job is rescheduled. The TaskTracker on each node spawns a separate Java Virtual Machine process to prevent the TaskTracker itself from failing if the running job crashes its JVM. A heartbeat is sent from the TaskTracker to the JobTracker every few minutes to check its status. The Job Tracker and TaskTracker status and information is exposed by Jetty and can be viewed from a web browser.

Known limitations of this approach are:

The allocation of work to TaskTrackers is very simple. Every TaskTracker has a number of available slots (such as "4 slots"). Every active map or reduce task takes up one slot. The Job Tracker allocates work to the tracker nearest to the data with an available slot. There is no consideration of the current system load of the allocated machine, and hence its actual availability.
If one TaskTracker is very slow, it can delay the entire MapReduce job�especially towards the end of a job, where everything can end up waiting for the slowest task. With speculative execution enabled, however, a single task can be executed on multiple slave nodes.
Scheduling
By default Hadoop uses FIFO scheduling, and optionally 5 scheduling priorities to schedule jobs from a work queue.[77] In version 0.19 the job scheduler was refactored out of the JobTracker, while adding the ability to use an alternate scheduler (such as the Fair scheduler or the Capacity scheduler, described next).[78]

Fair scheduler
The fair scheduler was developed by Facebook.[79] The goal of the fair scheduler is to provide fast response times for small jobs and QoS for production jobs. The fair scheduler has three basic concepts.[80]

Jobs are grouped into pools.
Each pool is assigned a guaranteed minimum share.
Excess capacity is split between jobs.
By default, jobs that are uncategorized go into a default pool. Pools have to specify the minimum number of map slots, reduce slots, and a limit on the number of running jobs.

Capacity scheduler
The capacity scheduler was developed by Yahoo. The capacity scheduler supports several features that are similar to the fair scheduler.[81]

Queues are allocated a fraction of the total resource capacity.
Free resources are allocated to queues beyond their total capacity.
Within a queue a job with a high level of priority has access to the queue's resources.
There is no preemption once a job is running.

Other applications
The HDFS file system is not restricted to MapReduce jobs. It can be used for other applications, many of which are under development at Apache. The list includes the HBase database, the Apache Mahout machine learning system, and the Apache Hive Data Warehouse system. Hadoop can in theory be used for any sort of work that is batch-oriented rather than real-time, is very data-intensive, and benefits from parallel processing of data. It can also be used to complement a real-time system, such as lambda architecture.

As of October 2009, commercial applications of Hadoop[82] included:

Log and/or clickstream analysis of various kinds
Marketing analytics
Machine learning and/or sophisticated data mining
Image processing
Processing of XML messages
Web crawling and/or text processing
General archiving, including of relational/tabular data, e.g. for compliance
Prominent users
On February 19, 2008, Yahoo! Inc. launched what it claimed was the world's largest Hadoop production application. The Yahoo! Search Webmap is a Hadoop application that runs on a Linux cluster with more than 10,000 cores and produced data that was used in every Yahoo! web search query.[83] There are multiple Hadoop clusters at Yahoo! and no HDFS file systems or MapReduce jobs are split across multiple datacenters. Every Hadoop cluster node bootstraps the Linux image, including the Hadoop distribution. Work that the clusters perform is known to include the index calculations for the Yahoo! search engine. In June 2009, Yahoo! made the source code of the Hadoop version it runs available to the public via the open-source community.[84]

In 2010, Facebook claimed that they had the largest Hadoop cluster in the world with 21 PB of storage.[85] In June 2012, they announced the data had grown to 100 PB[86] and later that year they announced that the data was growing by roughly half a PB per day.[87]

As of 2013, Hadoop adoption had become widespread: more than half of the Fortune 50 used Hadoop.[88]

Hadoop hosting in the Cloud
Hadoop can be deployed in a traditional onsite datacenter as well as in the cloud.[89] The cloud allows organizations to deploy Hadoop without hardware to acquire or specific setup expertise.[90] Vendors who currently have an offer for the cloud include Microsoft, Amazon, IBM,[91] Google and Oracle.[92]

On Microsoft Azure
Azure HDInsight[93] is a service that deploys Hadoop on Microsoft Azure. HDInsight uses Hortonworks HDP and was jointly developed for HDI with Hortonworks. HDI allows programming extensions with .NET (in addition to Java). HDInsight also supports creation of Hadoop clusters using Linux with Ubuntu.[93] By deploying HDInsight in the cloud, organizations can spin up the number of nodes they want and only get charged for the compute and storage that is used.[93] Hortonworks implementations can also move data from the on-premises datacenter to the cloud for backup, development/test, and bursting scenarios.[93] It is also possible to run Cloudera or Hortonworks Hadoop clusters on Azure Virtual Machines.

On Amazon EC2/S3 services
It is possible to run Hadoop on Amazon Elastic Compute Cloud (EC2) and Amazon Simple Storage Service (S3).[94] As an example, The New York Times used 100 Amazon EC2 instances and a Hadoop application to process 4 TB of raw image TIFF data (stored in S3) into 11 million finished PDFs in the space of 24 hours at a computation cost of about $240 (not including bandwidth).[95]

There is support for the S3 object store in the Apache Hadoop releases, though this is below what one expects from a traditional POSIX filesystem. Specifically, operations such as rename() and delete() on directories are not atomic, and can take time proportional to the number of entries and the amount of data in them.

Amazon Elastic MapReduce
Elastic MapReduce (EMR)[96] was introduced by Amazon.com in April 2009. Provisioning of the Hadoop cluster, running and terminating jobs, and handling data transfer between EC2(VM) and S3(Object Storage) are automated by Elastic MapReduce. Apache Hive, which is built on top of Hadoop for providing data warehouse services, is also offered in Elastic MapReduce.[97]

Support for using Spot Instances[98] was later added in August 2011.[99] Elastic MapReduce is fault-tolerant for slave failures,[100] and it is recommended to only run the Task Instance Group on spot instances to take advantage of the lower cost while maintaining availability.[101]

On CenturyLink Cloud (CLC)
CenturyLink Cloud [102] offers Hadoop via both a managed and un-managed model via their Hadoop[103] offering. CLC also offers customers several managed Cloudera Blueprints, the newest managed service in the CenturyLink Cloud big data Blueprints portfolio, which also includes Cassandra and MongoDB solutions.[104]

Google Cloud Platform
There are multiple ways to run the Hadoop ecosystem on Google Cloud Platform ranging from self-managed to Google-managed.[105]

Google Cloud Dataproc � A managed Spark and Hadoop service[106]
Command line tools (bdutil) � A collection of shell scripts to manually create and manage Spark and Hadoop clusters[107]
Third party Hadoop distributions:
Cloudera � Using the Cloudera Director Plugin for Google Cloud Platform[108]
Hortonworks � Using bdutil support for Hortonworks HDP[109]
MapR � Using bdutil support for MapR[110]
Google also offers connectors for using other Google Cloud Platform products with Hadoop, such as a Google Cloud Storage connector for using Google Cloud Storage and a Google BigQuery connector for using Google BigQuery.

Commercial support
A number of companies offer commercial implementations or support for Hadoop.[111]

ASF's view on the use of "Hadoop" in product names
The Apache Software Foundation has stated that only software officially released by the Apache Hadoop Project can be called Apache Hadoop or Distributions of Apache Hadoop.[112] The naming of products and derivative works from other vendors and the term "compatible" are somewhat controversial within the Hadoop developer community.[113]

Papers
Some papers influenced the birth and growth of Hadoop and big data processing. Here is a partial list:

Jeffrey Dean, Sanjay Ghemawat (2004) MapReduce: Simplified Data Processing on Large Clusters, Google. This paper inspired Doug Cutting to develop an open-source implementation of the Map-Reduce framework. He named it Hadoop, after his son's toy elephant.
Michael Franklin, Alon Halevy, David Maier (2005) From Databases to Dataspaces: A New Abstraction for Information Management. The authors highlight the need for storage systems to accept all data formats and to provide APIs for data access that evolve based on the storage system�s understanding of the data.
Fay Chang et al. (2006) Bigtable: A Distributed Storage System for Structured Data, Google.
Robert Kallman et al. (2008) H-store: a high-performance, distributed main memory transaction processing system
See also
Portal icon	Free software portal
Apache Accumulo � Secure BigTable[114]
Apache Cassandra � A column-oriented database that supports access from Hadoop
Apache CouchDB is a database that uses JSON for documents, JavaScript for MapReduce queries, and regular HTTP for an API
Big data
Cloud computing
Data Intensive Computing
HPCC � LexisNexis Risk Solutions High Performance Computing Cluster
Hypertable � HBase alternative
Sector/Sphere � Open source distributed storage and processing
Simple Linux Utility for Resource Management
