MATLAB (matrix laboratory) is a multi-paradigm numerical computing environment and fourth-generation programming language. A proprietary programming language developed by MathWorks, MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages, including C, C++, Java, Fortran and Python.

Although MATLAB is intended primarily for numerical computing, an optional toolbox uses the MuPAD symbolic engine, allowing access to symbolic computing abilities. An additional package, Simulink, adds graphical multi-domain simulation and model-based design for dynamic and embedded systems.

In 2004, MATLAB had around one million users across industry and academia.[3] MATLAB users come from various backgrounds of engineering, science, and economics.

Contents

    1 History
    2 Syntax
        2.1 Variables
        2.2 Vectors and matrices
        2.3 Structures
        2.4 Functions
        2.5 Function handles
        2.6 Classes and object-oriented programming
    3 Graphics and graphical user interface programming
    4 Interfacing with other languages
    5 License
    6 Alternatives
    7 Release history
    8 File extensions
        8.1 MATLAB
        8.2 Simulink
        8.3 Simscape
        8.4 MuPAD
        8.5 Third-party
    9 Easter eggs
    10 See also
    11 Notes
    12 References
    13 External links

History

Cleve Moler, the chairman of the computer science department at the University of New Mexico, started developing MATLAB in the late 1970s.[4] He designed it to give his students access to LINPACK and EISPACK without them having to learn Fortran. It soon spread to other universities and found a strong audience within the applied mathematics community. Jack Little, an engineer, was exposed to it during a visit Moler made to Stanford University in 1983. Recognizing its commercial potential, he joined with Moler and Steve Bangert. They rewrote MATLAB in C and founded MathWorks in 1984 to continue its development. These rewritten libraries were known as JACKPAC.[5] In 2000, MATLAB was rewritten to use a newer set of libraries for matrix manipulation, LAPACK.[6]

MATLAB was first adopted by researchers and practitioners in control engineering, Little's specialty, but quickly spread to many other domains. It is now also used in education, in particular the teaching of linear algebra, numerical analysis, and is popular amongst scientists involved in image processing.[4]
Syntax

The MATLAB application is built around the MATLAB scripting language. Common usage of the MATLAB application involves using the Command Window as an interactive mathematical shell or executing text files containing MATLAB code.[7]
Variables

Variables are defined using the assignment operator, =. MATLAB is a weakly typed programming language because types are implicitly converted.[8] It is an inferred typed language because variables can be assigned without declaring their type, except if they are to be treated as symbolic objects,[9] and that their type can change. Values can come from constants, from computation involving values of other variables, or from the output of a function. For example:

>> x = 17
x =
 17

>> x = 'hat'
x =
hat

>> y = x + 0
y =
       104        97       116

>> x = [3*4, pi/2]
x =
   12.0000    1.5708

>> y = 3*sin(x)
y =
   -1.6097    3.0000

Vectors and matrices

A simple array is defined using the colon syntax: init:increment:terminator. For instance:

>> array = 1:2:9
array =
 1 3 5 7 9

defines a variable named array (or assigns a new value to an existing variable with the name array) which is an array consisting of the values 1, 3, 5, 7, and 9. That is, the array starts at 1 (the init value), increments with each step from the previous value by 2 (the increment value), and stops once it reaches (or to avoid exceeding) 9 (the terminator value).

>> array = 1:3:9
array =
 1 4 7

the increment value can actually be left out of this syntax (along with one of the colons), to use a default value of 1.

>> ari = 1:5
ari =
 1 2 3 4 5

assigns to the variable named ari an array with the values 1, 2, 3, 4, and 5, since the default value of 1 is used as the incrementer.

Indexing is one-based,[10] which is the usual convention for matrices in mathematics, although not for some programming languages such as C, C++, and Java.

Matrices can be defined by separating the elements of a row with blank space or comma and using a semicolon to terminate each row. The list of elements should be surrounded by square brackets: []. Parentheses: () are used to access elements and subarrays (they are also used to denote a function argument list).

>> A = [16 3 2 13; 5 10 11 8; 9 6 7 12; 4 15 14 1]
A =
 16  3  2 13
  5 10 11  8
  9  6  7 12
  4 15 14  1

>> A(2,3)
ans =
 11

Sets of indices can be specified by expressions such as "2:4", which evaluates to [2, 3, 4]. For example, a submatrix taken from rows 2 through 4 and columns 3 through 4 can be written as:

>> A(2:4,3:4)
ans =
 11 8
 7 12
 14 1

A square identity matrix of size n can be generated using the function eye, and matrices of any size with zeros or ones can be generated with the functions zeros and ones, respectively.

>> eye(3,3)
ans =
 1 0 0
 0 1 0
 0 0 1

>> zeros(2,3)
ans =
 0 0 0
 0 0 0

>> ones(2,3)
ans =
 1 1 1
 1 1 1

Most MATLAB functions can accept matrices and will apply themselves to each element. For example, mod(2*J,n) will multiply every element in "J" by 2, and then reduce each element modulo "n". MATLAB does include standard "for" and "while" loops, but (as in other similar applications such as R), using the vectorized notation often produces code that is faster to execute. This code, excerpted from the function magic.m, creates a magic square M for odd values of n (MATLAB function meshgrid is used here to generate square matrices I and J containing 1:n).

[J,I] = meshgrid(1:n);
A = mod(I + J - (n + 3) / 2, n);
B = mod(I + 2 * J - 2, n);
M = n * A + B + 1;

Structures

MATLAB has structure data types.[11] Since all variables in MATLAB are arrays, a more adequate name is "structure array", where each element of the array has the same field names. In addition, MATLAB supports dynamic field names[12] (field look-ups by name, field manipulations, etc.). Unfortunately, MATLAB JIT does not support MATLAB structures, therefore just a simple bundling of various variables into a structure will come at a cost.[13]
Functions

When creating a MATLAB function, the name of the file should match the name of the first function in the file. Valid function names begin with an alphabetic character, and can contain letters, numbers, or underscores. Functions are also often case sensitive.
Function handles

MATLAB supports elements of lambda calculus by introducing function handles,[14] or function references, which are implemented either in .m files or anonymous[15]/nested functions.[16]
Classes and object-oriented programming

MATLAB's support for object-oriented programming includes classes, inheritance, virtual dispatch, packages, pass-by-value semantics, and pass-by-reference semantics.[17] However, the syntax and calling conventions are significantly different from other languages. MATLAB has value classes and reference classes, depending on whether the class has handle as a super-class (for reference classes) or not (for value classes).[18]

Method call behavior is different between value and reference classes. For example, a call to a method

object.method();

can alter any member of object only if object is an instance of a reference class.

An example of a simple class is provided below.

classdef hello
    methods
        function greet(this)
            disp('Hello!')
        end
    end
end

When put into a file named hello.m, this can be executed with the following commands:

>> x = hello;
>> x.greet();
Hello!

Graphics and graphical user interface programming

MATLAB supports developing applications with graphical user interface (GUI) features. MATLAB includes GUIDE[19] (GUI development environment) for graphically designing GUIs.[20] It also has tightly integrated graph-plotting features. For example, the function plot can be used to produce a graph from two vectors x and y. The code:

x = 0:pi/100:2*pi;
y = sin(x);
plot(x,y)

produces the following figure of the sine function:

Matlab plot sin.svg

A MATLAB program can produce three-dimensional graphics using the functions surf, plot3 or mesh.

[X,Y] = meshgrid(-10:0.25:10,-10:0.25:10);
f = sinc(sqrt((X/pi).^2+(Y/pi).^2));
mesh(X,Y,f);
axis([-10 10 -10 10 -0.3 1])
xlabel('{\bfx}')
ylabel('{\bfy}')
zlabel('{\bfsinc} ({\bfR})')
hidden off

	    	

[X,Y] = meshgrid(-10:0.25:10,-10:0.25:10);
f = sinc(sqrt((X/pi).^2+(Y/pi).^2));
surf(X,Y,f);
axis([-10 10 -10 10 -0.3 1])
xlabel('{\bfx}')
ylabel('{\bfy}')
zlabel('{\bfsinc} ({\bfR})')

This code produces a wireframe 3D plot of the two-dimensional unnormalized sinc function: 	    	This code produces a surface 3D plot of the two-dimensional unnormalized sinc function:
MATLAB mesh sinc3D.svg 	    	MATLAB surf sinc3D.svg

In MATLAB, graphical user interfaces can be programmed with the GUI design environment (GUIDE) tool.[21]
Interfacing with other languages

MATLAB can call functions and subroutines written in the programming languages C or Fortran.[22] A wrapper function is created allowing MATLAB data types to be passed and returned. The dynamically loadable object files created by compiling such functions are termed "MEX-files" (for MATLAB executable).[23][24] Since 2014 increasing two-way interfacing with Python is being added.[25][26]

Libraries written in Perl, Java, ActiveX or .NET can be directly called from MATLAB,[27][28] and many MATLAB libraries (for example XML or SQL support) are implemented as wrappers around Java or ActiveX libraries. Calling MATLAB from Java is more complicated, but can be done with a MATLAB toolbox[29] which is sold separately by MathWorks, or using an undocumented mechanism called JMI (Java-to-MATLAB Interface),[30][31] (which should not be confused with the unrelated Java Metadata Interface that is also called JMI).

As alternatives to the MuPAD based Symbolic Math Toolbox available from MathWorks, MATLAB can be connected to Maple or Mathematica.[32][33]

Libraries also exist to import and export MathML.[34]
License

MATLAB is a proprietary product of MathWorks, so users are subject to vendor lock-in.[3][35] Although MATLAB Builder products can deploy MATLAB functions as library files which can be used with .NET[36] or Java[37] application building environment, future development will still be tied to the MATLAB language.

Each toolbox is purchased separately. If an evaluation license is requested, the MathWorks sales department requires detailed information about the project for which MATLAB is to be evaluated. If granted (which it often is), the evaluation license is valid for two to four weeks. A student version of MATLAB is available as is a home-use license for MATLAB, Simulink, and a subset of Mathwork's Toolboxes at substantially reduced prices.

It has been reported that European Union (EU) competition regulators are investigating whether MathWorks refused to sell licenses to a competitor.[38] The regulators dropped the investigation after the complainant withdrew their accusation and no evidence of wrongdoing was found.[39]
Alternatives
See also: list of numerical analysis software and comparison of numerical analysis software

MATLAB has a number of competitors.[40] Commercial competitors include Mathematica, TK Solver, Maple, and IDL. There are also free open source alternatives to MATLAB, in particular GNU Octave, Scilab, FreeMat, Julia, and Sage which are intended to be mostly compatible with the MATLAB language. Among other languages that treat arrays as basic entities (array programming languages) are APL, Fortran 90 and higher, S-Lang, as well as the statistical languages R and S. There are also libraries to add similar functionality to existing languages, such as IT++ for C++, Perl Data Language for Perl, ILNumerics for .NET, NumPy/SciPy/matplotlib for Python, SciLua 
/Torch for Lua, SciRuby 
for Ruby, and Numeric.js 
for JavaScript.

GNU Octave is unique from other alternatives because it treats incompatibility with MATLAB as a bug (see MATLAB Compatibility of GNU Octave). Therefore, GNU Octave attempts to provide a software clone of MATLAB.
Release history
Version[41] 	Release name 	Number 	Bundled JVM 	Year 	Release date 	Notes
MATLAB 1.0 				1984 		
MATLAB 2 				1986 		
MATLAB 3 				1987 		
MATLAB 3.5 				1990 		Ran on DOS but needed at least a 386 processor; version 3.5m needed math coprocessor
MATLAB 4 				1992 		
MATLAB 4.2c 				1994 		Ran on Windows 3.1x, needed a math coprocessor
MATLAB 5.0 	Volume 8 			1996 	December, 1996 	Unified releases across all platforms
MATLAB 5.1 	Volume 9 			1997 	May, 1997 	
MATLAB 5.1.1 	R9.1 				
MATLAB 5.2 	R10 			1998 	March, 1998 	
MATLAB 5.2.1 	R10.1 				
MATLAB 5.3 	R11 			1999 	January, 1999 	
MATLAB 5.3.1 	R11.1 			November, 1999 	
MATLAB 6.0 	R12 	12 	1.1.8 	2000 	November, 2000 	First release with bundled Java virtual machine (JVM)
MATLAB 6.1 	R12.1 	1.3.0 	2001 	June, 2001 	
MATLAB 6.5 	R13 	13 	1.3.1 	2002 	July, 2002 	
MATLAB 6.5.1 	R13SP1 		2003 		
MATLAB 6.5.2 	R13SP2 			Last release for IBM/AIX, Alpha/TRU64, and SGI/IRIX[42]
MATLAB 7 	R14 	14 	1.4.2 	2004 	June, 2004 	Introduced anonymous and nested functions[43]
MATLAB 7.0.1 	R14SP1 		October, 2004 	
MATLAB 7.0.4 	R14SP2 	1.5.0 	2005 	March 7, 2005 	Support for memory-mapped files[44]
MATLAB 7.1 	R14SP3 	1.5.0 	September 1, 2005 	
MATLAB 7.2 	R2006a 	15 	1.5.0 	2006 	March 1, 2006 	
MATLAB 7.3 	R2006b 	16 	1.5.0 	September 1, 2006 	HDF5-based MAT-file support
MATLAB 7.4 	R2007a 	17 	1.5.0_07 	2007 	March 1, 2007 	New bsxfun function to apply element-by-element binary operation with singleton expansion enabled[45]
MATLAB 7.5 	R2007b 	18 	1.6.0 	September 1, 2007 	Last release for Windows 2000 and PowerPC Mac; License Server support for Windows Vista;[46] new internal format for P-code
MATLAB 7.6 	R2008a 	19 	1.6.0 	2008 	March 1, 2008 	Major enhancements to object-oriented programming abilities with a new class definition syntax,[47] and ability to manage namespaces with packages[48]
MATLAB 7.7 	R2008b 	20 	1.6.0_04 	October 9, 2008 	New Map data structure:[49] upgrades to random number generators[50]
MATLAB 7.8 	R2009a 	21 	1.6.0_04 	2009 	March 6, 2009 	First release for Microsoft 32-bit & 64-bit Windows 7, new external interface to .NET Framework[51]
MATLAB 7.9 	R2009b 	22 	1.6.0_12 	September 4, 2009 	First release for Intel 64-bit Mac, and last for Solaris SPARC; new use for the tilde operator (~) to ignore arguments in function calls[52][53]
MATLAB 7.9.1 	R2009bSP1 	1.6.0_12 	2010 	April 1, 2010 	bug fixes.
MATLAB 7.10 	R2010a 	23 	1.6.0_12 	March 5, 2010 	Last release for Intel 32-bit Mac
MATLAB 7.11 	R2010b 	24 	1.6.0_17 	September 3, 2010 	Add support for enumerations[54]
MATLAB 7.11.1 	R2010bSP1 	1.6.0_17 	2011 	March 17, 2011 	bug fixes and updates
MATLAB 7.11.2 	R2010bSP2 	1.6.0_17 	April 5, 2012[55] 	bug fixes
MATLAB 7.12 	R2011a 	25 	1.6.0_17 	April 8, 2011 	New rng function to control random number generation[56][57][58]
MATLAB 7.13 	R2011b 	26 	1.6.0_17 	September 1, 2011 	Access-change parts of variables directly in MAT-files, without loading into memory;[59] increased maximum local workers with Parallel Computing Toolbox from 8 to 12[60]
MATLAB 7.14 	R2012a 	27 	1.6.0_17 	2012 	March 1, 2012 	
MATLAB 8 	R2012b 	28 	1.6.0_17 	September 11, 2012 	First release with Toolstrip interface;[61] MATLAB Apps.[62] redesigned documentation system
MATLAB 8.1 	R2013a 	29 	1.6.0_17 	2013 	March 7, 2013 	New unit testing framework[63]
MATLAB 8.2 	R2013b 	30 	1.7.0_11 	September 6, 2013[64] 	New table data type[65]
MATLAB 8.3 	R2014a 	31 	1.7.0_11 	2014 	March 7, 2014[66] 	Simplified compiler setup for building MEX-files; USB Webcams support in core MATLAB; number of local workers no longer limited to 12 with Parallel Computing Toolbox
MATLAB 8.4 	R2014b 	32 	1.7.0_11 	October 3, 2014 	New class-based graphics engine (a.k.a. HG2);[67] tabbing function in GUI;[68] improved user toolbox packaging and help files;[69] new objects for time-date manipulations;[70] Git-Subversion integration in IDE;[71] big data abilities with MapReduce (scalable to Hadoop);[72] new py package for using Python from inside MATLAB, new engine interface to call MATLAB from Python;[73][74] several new and improved functions: webread (RESTful web services with JSON/XML support), tcpclient (socket-based connections), histcounts, histogram, animatedline, and others
MATLAB 8.5 	R2015a 	33 	1.7.0_60 	2015 	March 5, 2015 	
MATLAB 8.6 	R2015b 	34 	1.7.0_60 	September 3, 2015 	
MATLAB 9.0 	R2016a 	35 	1.7.0_60 	2016 	March 3, 2016 	

The number (or release number) is the version reported by Concurrent License Manager program FLEXlm.

For a complete list of changes of both MATLAB and official toolboxes, consult the MATLAB release notes.[75]
File extensions
MATLAB

.fig 
    MATLAB figure
.m 
    MATLAB code (function, script, or class)
.mat 
    MATLAB data (binary file for storing variables)
.mex... (.mexw32, .mexw64, .mexglx, ...) 
    MATLAB executable MEX-files[76] (platform specific, e.g. ".mexmac" for the Mac, ".mexglx" for Linux, etc.[77])
.p 
    MATLAB content-obscured .m file (P-code[78])
.mlappinstall 
    MATLAB packaged App Installer[79]
.mlpkginstall
    support package installer (add-on for third-party hardware)[80]
.mltx
    packaged custom toolbox[81]
.prj
    project file used by various solutions (packaged app/toolbox projects, MATLAB Compiler/Coder projects, Simulink projects)
.rpt
    report setup file created by MATLAB Report Generator[82]

Simulink

.mdl 
    Simulink Model
.mdlp 
    Simulink Protected Model
.slx 
    Simulink Model (SLX format)
.slxp 
    Simulink Protected Model (SLX format)

Simscape

.ssc 
    Simscape[83] Model

MuPAD

.mn 
    MuPAD Notebook
.mu 
    MuPAD Code
.xvc, .xvz 
    MuPAD Graphics

Third-party

.jkt 
    GPU Cache file generated by Jacket for MATLAB (AccelerEyes)
.mum 
    MATLAB CAPE-OPEN Unit Operation Model File (AmsterCHEM)

Easter eggs
Screen capture of two easter eggs in MATLAB 3.5.

Several easter eggs exist in MATLAB.[84] These include hidden pictures,[85] and jokes. For example, typing in "spy" will generate a picture of the spies from Spy vs Spy. "Spy" was changed to an image of a dog in recent releases (R2011B). Typing in "why" randomly outputs a philosophical answer. Other commands include "penny", "toilet", "image", and "life". Not every Easter egg appears in every version of MATLAB.
